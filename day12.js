// Activity-1

// Task-1

function multi60(num) {
  if (typeof num === "number") {
    return num * 60;
  } else {
    throw Error("Please enter a number");
  }
}

try {
  console.log(multi60("five"));
} catch (err) {
  console.log(err);
}
console.log("Even if Program Crashes, I Will Not Stop");

console.log("\n");

// Task-2

function divide(num1, num2) {
  if (num2 !== 0) {
    return num1 / num2;
  } else {
    throw Error("Cannot Divisor Cannot Be Zero...");
  }
}

try {
  console.log(divide(10, 0));
} catch (err) {
  console.log("Error Occured:\n", err);
}
console.log("Even if Program Crashes, I Will Not Stop");

console.log("\n");

// Activity-2

// Task-3

try {
  console.log(divide(10, 0));
} catch (err) {
  console.log("Error Occured:\n", err);
} finally {
  console.log("This is the end of the program");
}

console.log("\n");

// Activity-3

// Task-4

class customError extends Error {
  constructor(message) {
    super(message);
    this.name = "CustomError";
  }
}

function anyErrorFunction() {
  throw new customError();
}

try {
  anyErrorFunction();
} catch (err) {
  if (err instanceof customError) {
    console.log("This error is an Instance of Custom Error\n", err);
  } else {
    console.log("This error is generated by the system\n", err);
  }
}

console.log("\n");

// Task-5

class validationError extends Error {
  constructor(mesasge) {
    super(mesasge);
    this.name = "ValidationError";
  }
}

function checkEmpty(str) {
  if (str !== "String" || str.trim() === "") {
    throw new validationError("Please enter a valid String");
  }
}

try {
  console.log(checkEmpty(""));
} catch (err) {
  if (err instanceof validationError) {
    console.log("This error is an Instance of Validation Error\n", err);
  } else {
    console.log("This error is generated by the system\n", err);
  }
}

console.log("\n");

// Activity-4

// Task-6

const ranNum = Math.floor(Math.random() * 100);
const promiseOne = new Promise(function (resolve, reject) {
  setTimeout(() => {
    if (ranNum % 5 != 0) {
      resolve(ranNum);
    } else {
      reject(new Error("This is not a valid number"));
    }
  }, 2000);
});
promiseOne.then((res) => console.log(res)).catch((err) => console.log(err));

console.log("\n");

// Task-7

async function promiseTwo(func) {
  try {
    let res = await func();
    console.log(res);
  } catch (err) {
    console.log(err);
  }
}

promiseTwo(() => promiseOne);

console.log("\n");

// Activity-5

// Task-8

fetch("https://jsonplaceholder.typicode.com/users")
  .then((res) => res.json())
  .then((res) => console.log(res))
  .catch((err) => console.log(err));

console.log("\n");

// Task-9

async function fetchData(fetchUrl) {
  try {
    const response = await fetch(fetchUrl);
    const data = await response.json();
    console.log(data);
  } catch (err) {
    console.log(err);
  }
}

fetchData("https://jsonplaceholder.typicode.com");
